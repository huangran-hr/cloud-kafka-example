server:
  port: 8080
spring:
  application:
    name: cloud-server-service
  cloud:
    function:
      definition: log #;func;log1;sendPerson
    stream:
      #source: toPerson;log
      bindings:
        log-in-0:
          group: group1
          destination: person1
          binder: kafka1
          backOffInitialInterval: 100000
        log1-in-0:
          group: group2
          destination: person1
          binder: kafka1
        func-in-0:
          group: group1
          destination: person
          binder: kafka1
        func-out-0:
          destination: person.name
          content-type: text/plain
          binder: kafka1
        sendPerson-out-0:
          destination: person.dest
          content-type: application/json
          binder: kafka1
        toPerson-out-0:
          destination: person.toPerson
          content-type: application/json
          binder: kafka1
      binders:
        kafka1:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: 192.168.11.11:31090,192.168.11.11:31091,192.168.11.11:31092
      kafka.default.consumer:
        pollTimeout: 5000
#        output1:
#          binder:
#            brokers: 192.168.11.11
#            defaultBrokerPort: 31090
#            zk-nodes: 192.168.11.11:32181
#            autoCreateTopics: true
  datasource:
    url: jdbc:mysql://localhost:3306/ps?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
    driverClassName: com.mysql.cj.jdbc.Driver
    username: root
    password: 1234
  jpa:
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  show-sql: true
  jackson:
    timeZone: Asia/Shanghai
app:
  id: qunar
info:
  app:
    name: cloud-server
    version: 0.0.1.SNAPSHOT
management:
  endpoint:
    shutdown:
      enabled: true
    beans:
      enabled: true
    metrics:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
apollo:
  bootstrap:
    enabled: true
    namespaces: apollo
    eagerLoad:
      enabled: true
  #cacheDir: E:/
  cluster: default
  autoUpdateInjectedSpringProperties: true
com:
  sjlh: 
    web:
      log:
        enabled: true
        appender:
          type: url
eureka:
  instance:
    registry: 
    hostname: 192.168.10.101
  client:
    enabled: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://eureka:eureka@192.168.1.110:8761/eureka/
    healthcheck:
      enabled: false